#version 430 core
#include <common>

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;


struct optimizedParticle
{
    uint index;
    uint cellID;
};

shared optimizedParticle chunk[1024];

void swap(inout uint index)
{
    optimizedParticle rip = chunk[gl_LocalInvocationID.x];
    chunk[gl_LocalInvocationID.x] = chunk[index];
    chunk[index] = rip;
} 

void bitonic_sort(inout uint chunk_offset, inout uint chunk_size, inout uint th_id, inout uint direction)
{
    uint index;
    chunk[gl_LocalInvocationID.x] = optimizedParticle(th_id, uint(particles[th_id].position.w));
    barrier();
    
    for (int step = 2; step <= chunk_size; step <<= 1)
    {
        for (int substep = step >> 1; substep > 0; substep >>= 1)
        {
            index = substep ^ gl_LocalInvocationID.x;
            if(index > gl_LocalInvocationID.x)
            {
            
                if ((((index & step) == 0 && chunk[gl_LocalInvocationID.x].cellID > chunk[index].cellID) ||
                    ((index & step) != 0 && chunk[gl_LocalInvocationID.x].cellID < chunk[index].cellID)) && direction == 0)
                {
                    swap(index);
                }
                
                if ((((index & step) != 0 && chunk[gl_LocalInvocationID.x].cellID > chunk[index].cellID) ||
                    ((index & step) == 0 && chunk[gl_LocalInvocationID.x].cellID < chunk[index].cellID)) && direction == 1)
                {
                    swap(index);
                }
            }
            barrier();
        }
    }
    
    temp[th_id] = particles[chunk[gl_LocalInvocationID.x].index];
    barrier();
    particles[th_id] = temp[th_id];
} 
 

void main()
{
    uint th_id = gl_GlobalInvocationID.x;
    uint chunk_size = 1024;
    uint chunk_offset = gl_WorkGroupID.x * chunk_size;
    uint num_chunks = int(ceil(sim.particleCount / chunk_size));
    chunk_size = chunk_size < sim.particleCount ? chunk_size : sim.particleCount;
    uint direction = gl_WorkGroupID.x % 2;
    if(th_id < sim.particleCount)
    {
        bitonic_sort(chunk_offset, chunk_size, th_id, direction);
    }
}
