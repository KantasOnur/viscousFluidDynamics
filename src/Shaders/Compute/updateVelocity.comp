#version 430 core
#include <common>

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void resolveCollisions(inout Particle p)
{
    for (int j = 0; j < 4; ++j)
    {
        vec4 normal = box.normals[j];
        float dirDotN = dot(p.position - box.bounds[j], normal);
        if (dirDotN < 0.0f)
        {
            p.position += -dirDotN * normal;
            p.prev_position = p.position;
            //p.position += normal * 0.015f;
            p.position += 0.8f * reflect(p.velocity, normal) * sim.dt;
        }
    }
}

void main()
{


    if (gl_GlobalInvocationID.x < sim.particleCount)
    {
        Particle p = particles[gl_GlobalInvocationID.x];

        // Ensure 4th component is ignored
        p.velocity = vec4(p.velocity.xyz, 0.0f);
        p.position = vec4(p.position.xyz, 0.0f);

        p.position = p.next_position;
        resolveCollisions(p);
        p.velocity = (p.position - p.prev_position) / sim.dt;
        particles[gl_GlobalInvocationID.x] = p;
    }
}